//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp_for_Self_Hosted_WS.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IProxy")]
    public interface IProxy {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/Get", ReplyAction="http://tempuri.org/IProxy/GetResponse")]
        string Get(string CacheItemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/Get", ReplyAction="http://tempuri.org/IProxy/GetResponse")]
        System.Threading.Tasks.Task<string> GetAsync(string CacheItemName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetWithDTSeconds", ReplyAction="http://tempuri.org/IProxy/GetWithDTSecondsResponse")]
        string GetWithDTSeconds(string CacheItemName, double dt_seconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetWithDTSeconds", ReplyAction="http://tempuri.org/IProxy/GetWithDTSecondsResponse")]
        System.Threading.Tasks.Task<string> GetWithDTSecondsAsync(string CacheItemName, double dt_seconds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetWithDT", ReplyAction="http://tempuri.org/IProxy/GetWithDTResponse")]
        string GetWithDT(string CacheItemName, System.DateTimeOffset dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProxy/GetWithDT", ReplyAction="http://tempuri.org/IProxy/GetWithDTResponse")]
        System.Threading.Tasks.Task<string> GetWithDTAsync(string CacheItemName, System.DateTimeOffset dt);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProxyChannel : ConsoleApp_for_Self_Hosted_WS.ServiceReference1.IProxy, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProxyClient : System.ServiceModel.ClientBase<ConsoleApp_for_Self_Hosted_WS.ServiceReference1.IProxy>, ConsoleApp_for_Self_Hosted_WS.ServiceReference1.IProxy {
        
        public ProxyClient() {
        }
        
        public ProxyClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProxyClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProxyClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Get(string CacheItemName) {
            return base.Channel.Get(CacheItemName);
        }
        
        public System.Threading.Tasks.Task<string> GetAsync(string CacheItemName) {
            return base.Channel.GetAsync(CacheItemName);
        }
        
        public string GetWithDTSeconds(string CacheItemName, double dt_seconds) {
            return base.Channel.GetWithDTSeconds(CacheItemName, dt_seconds);
        }
        
        public System.Threading.Tasks.Task<string> GetWithDTSecondsAsync(string CacheItemName, double dt_seconds) {
            return base.Channel.GetWithDTSecondsAsync(CacheItemName, dt_seconds);
        }
        
        public string GetWithDT(string CacheItemName, System.DateTimeOffset dt) {
            return base.Channel.GetWithDT(CacheItemName, dt);
        }
        
        public System.Threading.Tasks.Task<string> GetWithDTAsync(string CacheItemName, System.DateTimeOffset dt) {
            return base.Channel.GetWithDTAsync(CacheItemName, dt);
        }
    }
}
